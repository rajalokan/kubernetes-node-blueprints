tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.
  It is based on this documentation: https://kubernetes.io/docs/getting-started-guides/kubeadm/

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  # - http://www.getcloudify.org/spec/diamond-plugin/1.3.6/plugin.yaml
  # # - plugin:cloudify-diamond-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-openstack-plugin

  - imports/kubernetes.yaml
  - imports/cloud-config.yaml

  - inputs/openstack_inputs.yaml
  - inputs/inputs.yaml


inputs:

  image:
    description: Image to be used when launching agent VMs
    default: { get_secret: centos_core_image }

  flavor:
    description: Flavor of the agent VMs
    default: { get_secret: large_image_flavor }

  agent_user:
    description: >
      User for connecting to agent VMs
    default: centos

  node_security_group:
    description: >
      The resource id of the security group

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: keystone_username }
    user_domain_name: { get_input: keystone_user_domain_name }
    password: { get_input: keystone_password }
    project_name: { get_input: keystone_project_name }
    project_domain_name: { get_input: keystone_project_domain_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:

  k8s_node_host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      image: { get_input: image }
      flavor: { get_input: flavor }
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_node_scaling_tier
      - target: kubernetes_node_port
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      # cloudify.interfaces.monitoring_agent:
      #     install:
      #       implementation: diamond.diamond_agent.tasks.install
      #       inputs:
      #         diamond_config:
      #           interval: 1
      #     start: diamond.diamond_agent.tasks.start
      #     stop: diamond.diamond_agent.tasks.stop
      #     uninstall: diamond.diamond_agent.tasks.uninstall
      # cloudify.interfaces.monitoring:
      #     start:
      #       implementation: diamond.diamond_agent.tasks.add_collectors
      #       inputs:
      #         collectors_config:
      #           CPUCollector: {}
      #           MemoryCollector: {}
      #           LoadAverageCollector: {}
      #           DiskUsageCollector:
      #             config:
      #               devices: x?vd[a-z]+[0-9]*$
      #           NetworkCollector: {}
      #           ProcessResourcesCollector:
      #             config:
      #               enabled: true
      #               unit: B
      #               measure_collector_time: true
      #               cpu_interval: 0.5
      #               process:
      #                 hyperkube:
      #                   name: hyperkube

  # ----------------------------------------------------------------------------

  kubernetes_node_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_node_scaling_tier
      - type: cloudify.relationships.connected_to
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: kubernetes_security_group

  # ----------------------------------------------------------------------------

  kubernetes_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: node_security_group }

  # ----------------------------------------------------------------------------

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: external_network_name }

  # ----------------------------------------------------------------------------

  k8s_node_scaling_tier:
    type: cloudify.nodes.Root

  # ----------------------------------------------------------------------------

groups:
  k8s_node_group:
    members:
      - k8s_node_host
      - kubernetes_node_port

policies:
  kubernetes_node_vms_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 2
    targets: [k8s_node_group]

outputs:
  deployment-type:
    description: Deployment Type, Needed In order to determine if the kubernetes host is normal node or load balancer
    value: node

  deployment-node-data-type:
    description: Cloudify node type needed in kubernetes cloudify provider
    value: cloudify.nodes.ApplicationServer.kubernetes.Node
